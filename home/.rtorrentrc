# VELO 0 => ilimitado
download_rate = 300
upload_rate = 120
 
# WATCH IN AND OUT
schedule = watch_directory,5,5,load_start=/home/nofxxx/torrent/live/*.torrent
schedule = untied_directory,5,5,stop_untied=

# PARAR POUCO ESPACO NO DISCO
schedule = low_diskspace,5,60,close_low_diskspace=1000M

schedule = throttle_1u,08:00:00,19:00:00,upload_rate=10
schedule = throttle_1d,08:00:00,19:00:00,download_rate=40

#schedule = throttle_2u,19:01:00,24:00:00,upload_rate=30

# SAVE
directory =/home/nofxxx/torrent/down
 
# TEMP Boa idea path relativo ~
session = ~/.rtorrent
session_save = yes

#SCGIMount /RPC2 127.0.0.1:5000
#scgi_port = localhost:5000 

min_peers = 40
max_peers = 100

# Same as above but for seeding completed torrents (-1 = same as downloading)
min_peers_seed = -1
max_peers_seed = 50

# Maximum number of simultanious uploads per torrent.
#max_uploads = 15

# Stop torrents when reaching upload ratio in percent,
# when also reaching total upload in bytes, or when
# reaching final upload ratio in percent.
# example: stop at ratio 2.0 with at least 200 MB uploaded, or else ratio 20.0
#schedule = ratio,60,60,"stop_on_ratio=200,200M,2000"
 
# The ip address reported to the tracker.
#ip = 127.0.0.1
#ip = rakshasa.no

# The ip address the listening socket and outgoing connections is
# bound to.
#bind = 127.0.0.1
#bind = rakshasa.no

# PORTAS
port_range = 56881-56888
 
# Start opening ports at a random position within the port range.
#port_random = no

# Check hash for finished torrents. Might be usefull until the bug is
# fixed that causes lack of diskspace not to be properly reported.
#check_hash = no

# Set whetever the client should try to connect to UDP trackers.
#use_udp_trackers = yes

# Alternative calls to bind and ip that should handle dynamic ip's.
#schedule = ip_tick,0,1800,ip=rakshasa
#schedule = bind_tick,0,1800,bind=rakshasa
 
# Encryption options, set to none (default) or any combination of the following:
# allow_incoming, try_outgoing, require, require_RC4, enable_retry, prefer_plaintext
#
# The example value allows incoming encrypted connections, starts unencrypted
# outgoing connections but retries with encryption if they fail, preferring
# plaintext to RC4 encryption after the encrypted handshake
#
# encryption = allow_incoming,enable_retry,prefer_plaintext
 
# peer_exchange = yes
 
#hash_read_ahead = 10
 	
#hash_interval = 100
#hash_max_tries = 10